datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  isActive        Boolean       @default(true)
  freeTrailAcount Boolean       @default(true)
  email           String        @unique
  password        String
  firstName       String
  lastName        String
  Appointments    Appointment[]
  language        LANGUAGE_TYPE @default(fr)
  startWork       String        @default("08:00:00")
  endWork         String        @default("18:00:00")
  slotDuration    String        @default("00:15:00")
  withResoures    Boolean       @default(false)
  Fees            Fees[]
  Patient         Patient[]
}

model Collaborator {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  Patient      Patient[]
  Appointments Appointment[]
  email        String        @unique
  firstName    String
  lastName     String
}

model Patient {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  email          String        @unique
  name           String
  age            String
  insurance      String
  phone          String
  note           String
  user           User          @relation(fields: [userId], references: [id])
  userId         String        @db.ObjectId
  Appointments   Appointment[]
  Collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  collaboratorId String?       @db.ObjectId
}

model Appointment {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  patient        Patient          @relation(fields: [patientId], references: [id])
  patientId      String           @db.ObjectId
  startTime      DateTime
  endTime        DateTime
  note           String
  price          Int
  resource       String?
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @db.ObjectId
  status         APPOINTMENT_TYPE
  Collaborator   Collaborator?    @relation(fields: [collaboratorId], references: [id])
  collaboratorId String?          @db.ObjectId
}

model Fees {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  date   DateTime
  note   String
  amount Int
  user   User     @relation(fields: [userId], references: [id])
  userId String   @db.ObjectId
}

model Token {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  token   String
  user    String
  expires DateTime
  type    TOKEN_TYPE
}

enum TOKEN_TYPE {
  REFRESH
  INITIALIZE
  FORGET
  CONFIRM
}

enum APPOINTMENT_TYPE {
  DONE
  CANCELED
  PENDING
}

enum LANGUAGE_TYPE {
  fr
  en
  ar
}
